<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ptsoft.pts.business.dao.ProductInfoDao">
	<resultMap id="BaseResultMap" type="com.ptsoft.pts.business.model.vo.ProductInfo">
		<id column="ID" property="id" jdbcType="INTEGER" />
		<result column="SAPNO" property="sapNo" jdbcType="VARCHAR" />
		<result column="SERIALNO" property="serialNo" jdbcType="VARCHAR" />
		<result column="PRODUCT_ID" property="product_id" jdbcType="INTEGER" />
		<result column="PRODUCT_CODE" property="product_code" jdbcType="VARCHAR" />
		<result column="PRODUCT_NAME" property="product_name" jdbcType="VARCHAR" />
		<result column="PACKAGETP" property="packageTp" jdbcType="VARCHAR" />
		<result column="PACKAGELINE" property="packageLine" jdbcType="VARCHAR" />
		<result column="OPERATER" property="operater" jdbcType="VARCHAR" />
		<result column="VALIDATEUSER" property="validateUser" jdbcType="VARCHAR" />
		<result column="PACKAGE_TIME" property="package_time" jdbcType="VARCHAR" />
		<result column="PRODUCE_TIME" property="produce_time" jdbcType="VARCHAR" />
		<result column="QRCODE" property="qrCode" jdbcType="VARCHAR" />
	</resultMap>

	<resultMap type="java.util.LinkedHashMap" id="XlsResultMap">
		<result column="SERIALNO" property="SERIALNO" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
		<result column="SAPNO" property="SAPNO" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
		<result column="PRODUCT_CODE" property="PRODUCT_CODE" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
		<result column="PRODUCT_NAME" property="PRODUCT_NAME" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
		<result column="PACKAGETP" property="PACKAGETP" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
		<result column="PACKAGELINE" property="PACKAGELINE" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
		<result column="VALIDATEUSER" property="VALIDATEUSER" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
		<result column="PRODUCE_TIME" property="PRODUCE_TIME" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
		<result column="PACKAGE_TIME" property="PACKAGE_TIME" typeHandler="com.ptsoft.common.base.EmptyStringIfNull" />
	</resultMap>

	<select id="ProductInfo_getForExcel" resultMap="XlsResultMap" parameterType="map">
		Select i.serialNo, i.sapNo, i.product_code, i.product_name, i.packageTp, i.packageLine, i.validateUser, i.produce_time, i.package_time
		From Sy_Product_Info i
		Inner Join Sy_Order_Item_Map m On m.product_id = i.product_id And m.supplier_id = #{supplierId, jdbcType=INTEGER}
		Inner Join Sy_Qrcode q On q.qrcode = i.qrcode And q.supplier_id = #{supplierId, jdbcType=INTEGER}
		Where i.produce_time Between #{frmTm, jdbcType=VARCHAR} And #{toTm, jdbcType=VARCHAR}
		<if test="searchParam != null and searchParam != ''">
			And (
				i.sapNo Like #{searchParam, jdbcType=VARCHAR} Or Lower(i.product_code) Like Lower(#{searchParam, jdbcType=VARCHAR}) Or
				Lower(i.product_name) Like Lower(#{searchParam, jdbcType=VARCHAR}) Or Lower(i.serialNo) Like Lower(#{searchParam, jdbcType=VARCHAR})
			)
		</if>
		Order by i.produce_time DESC
	</select>

	<select id="ProductInfo_findAllBySupplier" resultMap="BaseResultMap" parameterType="map">
		Select x.* from
		(
			Select i.*, row_number() over (order by i.id DESC) num
			From Sy_Product_Info i
			Inner Join Sy_Order_Item_Map m On m.product_id = i.product_id And m.supplier_id = #{supplierId, jdbcType=INTEGER}
			Inner Join Sy_Qrcode q On q.qrcode = i.qrcode And q.supplier_id = #{supplierId, jdbcType=INTEGER}
			Where i.produce_time Between #{frmTm, jdbcType=VARCHAR} And #{toTm, jdbcType=VARCHAR}
			<if test="searchParam != null and searchParam != ''">
				And (
					i.sapNo Like #{searchParam, jdbcType=VARCHAR} Or Lower(i.product_code) Like Lower(#{searchParam, jdbcType=VARCHAR}) Or
					Lower(i.product_name) Like Lower(#{searchParam, jdbcType=VARCHAR}) Or Lower(i.serialNo) Like Lower(#{searchParam, jdbcType=VARCHAR})
				)
			</if>
			Order by i.produce_time DESC
		)x
		Where x.num Between #{begin, jdbcType=INTEGER} And #{end, jdbcType=INTEGER}
	</select>

	<select id="ProductInfo_getCountBySearch" resultType="int" parameterType="map">
		Select count(i.id) 
		From Sy_Product_Info i 
		Inner Join Sy_Order_Item_Map m On m.product_id = i.product_id And m.supplier_id = #{supplierId, jdbcType=INTEGER}
		Inner Join Sy_Qrcode q On q.qrcode = i.qrcode And q.supplier_id = #{supplierId, jdbcType=INTEGER}
		Where i.produce_time Between #{frmTm, jdbcType=VARCHAR} And #{toTm, jdbcType=VARCHAR}
		<if test="searchParam != null and searchParam != ''">
			And (
				i.sapNo Like #{searchParam, jdbcType=VARCHAR} Or Lower(i.product_code) Like Lower(#{searchParam, jdbcType=VARCHAR}) Or
				Lower(i.product_name) Like Lower(#{searchParam, jdbcType=VARCHAR}) Or Lower(i.serialNo) Like Lower(#{searchParam, jdbcType=VARCHAR})
			)
		</if>
	</select>

	<select id="ProductInfo_getCounter" parameterType="String" resultType="java.lang.Integer">
		Select count(id) From Sy_Product_Info Where qrCode = #{_param, jdbcType=VARCHAR}
	</select>
	
	<select id="ProductInfo_isExit" parameterType="String" resultType="com.ptsoft.pts.business.model.vo.ProductInfo">
		select * from sy_product_info where qrCode = #{_param, jdbcType=VARCHAR}
	</select>

	<select id="ProductInfo_getByQrCode" resultMap="BaseResultMap" parameterType="String">
		Select * From Sy_Product_Info Where qrCode = #{_param, jdbcType=VARCHAR}
	</select>

	<select id="ProductInfo_hasProductInfo" resultType="int" parameterType="map">
		Select count(i.id)
		From Sy_Product_Info i
		Left Join Sy_Qrcode q On q.qrcode = i.qrcode
		Where q.status = 1 And q.supplier_id = #{supplierId, jdbcType=INTEGER} And i.product_id = #{productId, jdbcType=INTEGER}
	</select>

	<insert id="ProductInfo_insert" parameterType="com.ptsoft.pts.business.model.vo.ProductInfo">
		<selectKey resultType="java.lang.Integer" keyProperty="id" order="BEFORE">
			SELECT SEQ_PRODUCT_INFO_ID.NEXTVAL AS id FROM DUAL
		</selectKey>
		Insert Into Sy_Product_Info(id, sapNo, serialNo, product_id, product_code, product_name, packageTp, packageLine, operater,
		validateUser, package_time, produce_time, qrCode)
		Values (
			#{id, jdbcType=INTEGER},
			#{sapNo, jdbcType=VARCHAR},
			#{serialNo, jdbcType=VARCHAR},
			#{product_id, jdbcType=INTEGER},
			#{product_code, jdbcType=VARCHAR},
			#{product_name, jdbcType=VARCHAR},
			#{packageTp, jdbcType=VARCHAR},
			#{packageLine, jdbcType=VARCHAR},
			#{operater, jdbcType=VARCHAR},
			#{validateUser, jdbcType=VARCHAR},
			#{package_time, jdbcType=VARCHAR},
			#{produce_time, jdbcType=VARCHAR},
			#{qrCode, jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="ProductInfo_insertLot" parameterType="com.ptsoft.pts.business.model.vo.ProductInfo">
		Insert Into Sy_Product_Info(id, sapNo, serialNo, product_id, product_code, product_name, packageTp, packageLine, operater,
		validateUser, package_time, produce_time, qrCode)
		Select SEQ_PRODUCT_INFO_ID.NEXTVAL id, a.sapNo, a.serialNo, a.product_id, a.product_code, a.product_name, a.packageTp,
		a.packageLine, a.operater, a.validateUser, a.package_time, a.produce_time, a.qrCode FROM(
		<foreach collection="list" item="item" index="index" separator="UNION ALL">
			Select 
			#{item.sapNo, jdbcType=VARCHAR} sapNo,
			#{item.serialNo, jdbcType=VARCHAR} serialNo,
			#{item.product_id, jdbcType=INTEGER} product_id,
			#{item.product_code, jdbcType=VARCHAR} product_code,
			#{item.product_name, jdbcType=VARCHAR} product_name,
			#{item.packageTp, jdbcType=VARCHAR} packageTp,
			#{item.packageLine, jdbcType=VARCHAR} packageLine,
			#{item.operater, jdbcType=VARCHAR} operater,
			#{item.validateUser, jdbcType=VARCHAR} validateUser,
			#{item.package_time, jdbcType=VARCHAR} package_time,
			#{item.produce_time, jdbcType=VARCHAR} produce_time,
			#{item.qrCode, jdbcType=VARCHAR} qrCode
			FROM dual
		</foreach>
		)a
	</insert>

	<delete id="ProductInfo_deleteLot" parameterType="String">
		Delete From Sy_Product_Info Where qrCode in
        <foreach item="deleteItem" collection="array" open="(" separator="," close=")">
            #{deleteItem}
        </foreach>
	</delete>

</mapper>